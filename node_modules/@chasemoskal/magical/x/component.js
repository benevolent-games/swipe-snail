var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
import { elem } from "./elem.js";
import { LitElement } from "lit";
export function asPropertyDeclarations(declarations) {
    return declarations;
}
export function component2(options) {
    return {
        render(renderHtml) {
            return component(options, renderHtml);
        },
    };
}
export function component(options, renderHtml) {
    var _renderCount, _stateCount, _stateMap, _setups, _teardowns, _use, _a;
    return _a = class extends LitElement {
            constructor() {
                super(...arguments);
                _renderCount.set(this, 0);
                _stateCount.set(this, 0);
                _stateMap.set(this, new Map());
                _setups.set(this, new Set());
                _teardowns.set(this, new Set());
                _use.set(this, {
                    element: this,
                    ...elem(this),
                    setup: initializer => {
                        if (__classPrivateFieldGet(this, _renderCount, "f") === 0) {
                            __classPrivateFieldGet(this, _setups, "f").add(initializer);
                        }
                    },
                    state: initial => {
                        const currentCount = __classPrivateFieldGet(this, _stateCount, "f");
                        __classPrivateFieldSet(this, _stateCount, __classPrivateFieldGet(this, _stateCount, "f") + 1, "f");
                        let currentValue;
                        const alreadySet = __classPrivateFieldGet(this, _stateMap, "f").has(currentCount);
                        if (alreadySet)
                            currentValue = __classPrivateFieldGet(this, _stateMap, "f").get(currentCount);
                        else {
                            currentValue = ((typeof initial === "function")
                                ? initial(this)
                                : initial);
                            __classPrivateFieldGet(this, _stateMap, "f").set(currentCount, currentValue);
                        }
                        const getter = () => __classPrivateFieldGet(this, _stateMap, "f").get(currentCount);
                        return [
                            currentValue,
                            valueOrFunction => {
                                const newValue = (typeof valueOrFunction === "function")
                                    ? valueOrFunction(getter())
                                    : valueOrFunction;
                                __classPrivateFieldGet(this, _stateMap, "f").set(currentCount, newValue);
                                this.requestUpdate();
                            },
                            () => __classPrivateFieldGet(this, _stateMap, "f").get(currentCount),
                        ];
                    },
                });
            }
            firstUpdated() {
                for (const initializer of __classPrivateFieldGet(this, _setups, "f")) {
                    const teardown = initializer(this);
                    if (teardown)
                        __classPrivateFieldGet(this, _teardowns, "f").add(teardown);
                }
            }
            disconnectedCallback() {
                for (const teardown of __classPrivateFieldGet(this, _teardowns, "f"))
                    teardown();
                __classPrivateFieldGet(this, _teardowns, "f").clear();
                __classPrivateFieldSet(this, _renderCount, 0, "f");
                super.disconnectedCallback();
            }
            createRenderRoot() {
                if (options.shadow ?? true)
                    return super.createRenderRoot();
                else {
                    const root = document.createElement("div");
                    this.appendChild(root);
                    if (options.styles) {
                        const style = document.createElement("style");
                        style.textContent = options.styles.cssText;
                        this.appendChild(style);
                    }
                    return root;
                }
            }
            render() {
                __classPrivateFieldSet(this, _stateCount, 0, "f");
                const result = renderHtml(__classPrivateFieldGet(this, _use, "f"));
                __classPrivateFieldSet(this, _renderCount, __classPrivateFieldGet(this, _renderCount, "f") + 1, "f");
                return result;
            }
        },
        _renderCount = new WeakMap(),
        _stateCount = new WeakMap(),
        _stateMap = new WeakMap(),
        _setups = new WeakMap(),
        _teardowns = new WeakMap(),
        _use = new WeakMap(),
        _a.styles = options.styles,
        _a.properties = options.properties ?? {},
        _a;
}
//# sourceMappingURL=component.js.map