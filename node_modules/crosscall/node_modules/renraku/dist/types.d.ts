export interface Logger {
    log: typeof console.log;
    warn: typeof console.warn;
    info: typeof console.info;
    debug: typeof console.debug;
    error: typeof console.error;
}
export interface Api {
    [key: string]: Topic;
}
export interface Topic {
    [key: string]: Method;
}
export declare type Method = (...args: any[]) => Promise<any>;
export declare const asApi: <A extends Api>(api: A) => A;
export declare const asTopic: <T extends Topic>(topic: T) => T;
export declare const asMethod: <M extends Method>(method: M) => M;
export declare type Await<T> = T extends Promise<infer U> ? U : T;
export declare type AwaitProps<T> = {
    [P in keyof T]: Await<T[P]>;
};
export declare type Shift<T extends any[]> = T["length"] extends 0 ? undefined : (((...b: T) => void) extends (a: any, ...b: infer I) => void ? I : []);
export declare type MetaMethod<Meta> = (meta: Meta, ...args: any[]) => Promise<any>;
export declare type PayloadMethod<Payload> = (meta: Payload, ...args: any[]) => Promise<any>;
export declare type AddMeta<M extends MetaMethod<any>> = (...args: Shift<Parameters<M>>) => ReturnType<M>;
export declare type AddMetaTopic<T extends Topic> = {
    [P in keyof T]: AddMeta<T[P]>;
};
export declare type AddMetaApi<A extends Api> = {
    [P in keyof A]: AddMetaTopic<A[P]>;
};
export declare type ProcessPayload<Meta, M extends Method> = (meta: Meta, ...args: Shift<Parameters<M>>) => ReturnType<M>;
export declare type ProcessPayloadTopic<Meta, T extends Topic> = {
    [P in keyof T]: ProcessPayload<Meta, T[P]>;
};
export declare type ProcessPayloadApi<Meta, A extends Api> = {
    [P in keyof A]: ProcessPayloadTopic<Meta, A[P]>;
};
export declare type Declientize<M extends ClientMethod> = (...args: Shift<Parameters<M>>) => Promise<Await<ReturnType<M>>["result"]>;
export declare type DeclientizeTopic<T extends ClientTopic> = {
    [P in keyof T]: Declientize<T[P]>;
};
export declare type DeclientizeApi<A extends ClientApi> = {
    [P in keyof A]: DeclientizeTopic<A[P]>;
};
export declare type Serverize<M extends (...args: any[]) => Promise<any>> = (context: ServerContext, ...args: Parameters<M>) => Promise<ServerResponse<Await<ReturnType<M>>>>;
export declare type ServerizeTopic<T extends ServerTopic> = {
    [P in keyof T]: Serverize<T[P]>;
};
export declare type ServerizeApi<A extends ServerApi> = {
    [P in keyof A]: ServerizeTopic<A[P]>;
};
export declare type Clientize<A extends Api> = {
    [P in keyof A]: {
        [P2 in keyof A[P]]: (context: ClientContext, ...args: Parameters<A[P][P2]>) => Promise<ClientResponse<Await<ReturnType<A[P][P2]>>>>;
    };
};
export declare type Augmentation<Ret = any> = (context: ServerContext) => Promise<(result: Ret) => Promise<ServerResponse<Ret>>>;
export declare type Shape<T extends Topic> = {
    [P in keyof T]: T[P] extends Method ? "method" : never;
};
export declare type ApiShape<A extends Api> = {
    [P in keyof A]: Shape<A[P]>;
};
export interface CorsPermissions {
    allowed: RegExp;
    forbidden: RegExp;
}
export interface WhitelistPermissions {
    [key: string]: string;
}
export declare type ApiClient<A extends Api> = (options: ClientOptions<A>) => Promise<A>;
export interface ClientOptions<A extends Api> {
    url: string;
    shape: ApiShape<A>;
    credentials?: Credentials;
}
export interface Credentials {
    id: string;
    privateKey: string;
}
export interface Headers {
    [key: string]: string;
}
export interface ServerContext {
    headers: Headers;
}
export interface ClientContext {
    headers?: Headers;
}
export declare type ServerResponse<R = any> = {
    header?: Headers;
    result: R;
};
export declare type ClientResponse<R = any> = {
    header: Headers;
    result: R;
};
export declare type ServerMethod = (context: ServerContext, ...args: any[]) => Promise<ServerResponse>;
export declare type ClientMethod = (context: ClientContext, ...args: any[]) => Promise<ClientResponse>;
export interface ServerTopic extends Topic {
    [key: string]: ServerMethod;
}
export interface ClientTopic extends Topic {
    [key: string]: ClientMethod;
}
export interface ServerApi extends Api {
    [key: string]: ServerTopic;
}
export interface ClientApi extends Api {
    [key: string]: ClientTopic;
}
export interface ApiServerOptions<A extends ServerApi> {
    expose: A;
    debug?: boolean;
    logger?: Logger;
}
export interface ApiClientOptions<A extends Api> {
    url: string;
    shape: ApiShape<A>;
}
