import { Api, Topic, AddMetaTopic, AddMetaApi, Augmentation, ClientContext, ClientResponse, DeclientizeTopic, DeclientizeApi, ServerContext, ProcessPayloadTopic, ServerizeTopic, ServerizeApi } from "./types.js";
export declare function processPayload<Meta, Payload, Args extends any[]>(transformer: (meta: Meta) => Promise<Payload>, method: (payload: Payload, ...args: Args) => Promise<any>): (meta: Meta, ...args: Args) => Promise<any>;
export declare function processPayloadTopic<Meta, Payload, Top extends {
    [key: string]: (payload: Payload, ...args: any[]) => Promise<any>;
}>(transformer: (meta: Meta) => Promise<Payload>, topic: Top): ProcessPayloadTopic<Meta, Top>;
export declare function addMeta<Meta, Meth extends (meta: Meta, ...args: any[]) => Promise<Ret>, Args extends any[], Ret>(getMeta: () => Promise<Meta>, method: Meth): (...args: Args) => Promise<Ret>;
export declare function addMetaTopic<T extends Topic, Meta>(getMeta: () => Promise<Meta>, topic: T): AddMetaTopic<T>;
export declare function addMetaApi<A extends Api, Meta>(getMeta: () => Promise<Meta>, api: A): AddMetaApi<A>;
export declare function declientize<Args extends any[]>(getRequest: () => Promise<ClientContext>, processResponse: (response: ClientResponse) => Promise<any>, method: (request: ClientContext, ...args: Args) => Promise<ClientResponse>): (...args: Args) => Promise<any>;
export declare function declientizeTopic<T extends Topic>(getRequest: () => Promise<ClientContext>, processResponse: (response: ClientResponse) => Promise<any>, topic: T): DeclientizeTopic<T>;
export declare function declientizeApi<A extends Api>(getRequest: () => Promise<ClientContext>, processResponse: (response: ClientResponse) => Promise<any>, api: A): DeclientizeApi<A>;
export declare function serverize<Context extends ServerContext, Args extends any[], Ret>(augmentation: Augmentation<Ret>, method: (...args: Args) => Promise<Ret>): (context: Context, ...args: Args) => Promise<import("./types.js").ServerResponse<Ret>>;
export declare function serverizeTopic<Top extends Topic>(augmentation: Augmentation, topic: Topic): ServerizeTopic<Top>;
export declare function serverizeApi<A extends Api, Aug extends Augmentation>(augmentation: Aug, api: A): ServerizeApi<A>;
